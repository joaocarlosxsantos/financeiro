const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testNotificationAPI() {
  console.log('üß™ Testando o sistema de notifica√ß√µes via API...\n');

  try {
    // 1. Encontrar um usu√°rio ativo
    const user = await prisma.user.findFirst({
      include: {
        wallets: true
      }
    });

    if (!user || !user.wallets.length) {
      console.log('‚ùå Nenhum usu√°rio com carteiras encontrado');
      return;
    }

    console.log(`üë§ Testando com usu√°rio: ${user.email}`);

    // 2. Verificar notifica√ß√µes existentes
    const existingNotifications = await prisma.notification.findMany({
      where: {
        userId: user.id,
        type: 'LOW_BALANCE',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // √∫ltimas 24h
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüìã Notifica√ß√µes LOW_BALANCE nas √∫ltimas 24h: ${existingNotifications.length}`);
    
    if (existingNotifications.length > 0) {
      existingNotifications.forEach((notif, index) => {
        console.log(`  ${index + 1}. ID: ${notif.id} | Ativa: ${notif.isActive} | Lida: ${notif.isRead} | Criada: ${notif.createdAt.toLocaleString()}`);
      });
    }

    // 3. Criar uma despesa para testar
    console.log('\nüí∏ Criando despesa via API...');
    
    const wallet = user.wallets[0];
    const category = await prisma.category.findFirst({
      where: { userId: user.id, type: 'EXPENSE' }
    });

    if (!category) {
      console.log('‚ùå Nenhuma categoria encontrada');
      return;
    }

    // Simular chamada para API de despesas
    const expenseData = {
      description: `Teste notifica√ß√£o - ${new Date().toISOString()}`,
      amount: 2000, // Valor alto para potencialmente gerar alerta
      date: new Date().toISOString(),
      type: 'VARIABLE',
      categoryId: category.id,
      walletId: wallet.id
    };

    console.log('üì§ Dados da despesa:', expenseData);
    console.log('\n‚ö†Ô∏è  Para testar completamente, voc√™ precisa fazer uma requisi√ß√£o POST para:');
    console.log('   http://localhost:3000/api/expenses');
    console.log('   Com os dados acima no body da requisi√ß√£o');

    // 4. Aguardar um pouco e verificar novas notifica√ß√µes
    console.log('\n‚è≥ Aguarde alguns segundos e depois verifique as notifica√ß√µes...');
    
    // Simular que passaram alguns segundos
    await new Promise(resolve => setTimeout(resolve, 2000));

    const allNotifications = await prisma.notification.findMany({
      where: {
        userId: user.id,
        type: 'LOW_BALANCE',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüìä Resumo atual de notifica√ß√µes LOW_BALANCE (24h):`);
    console.log(`   Total: ${allNotifications.length}`);
    console.log(`   Ativas: ${allNotifications.filter(n => n.isActive).length}`);
    console.log(`   Inativas: ${allNotifications.filter(n => !n.isActive).length}`);
    console.log(`   Lidas: ${allNotifications.filter(n => n.isRead).length}`);
    console.log(`   N√£o lidas: ${allNotifications.filter(n => !n.isRead).length}`);

    // 5. Verificar API de notifica√ß√µes
    console.log('\nüîç Para testar a API de notifica√ß√µes, acesse:');
    console.log('   http://localhost:3000/api/notifications?limit=50');
    console.log('   (Deve retornar apenas notifica√ß√µes ativas)');

    console.log('\n‚úÖ Script de verifica√ß√£o conclu√≠do!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('   1. Crie uma despesa no sistema web');
    console.log('   2. Verifique se a notifica√ß√£o aparece');
    console.log('   3. Teste os cen√°rios de substitui√ß√£o de notifica√ß√µes');

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testNotificationAPI();