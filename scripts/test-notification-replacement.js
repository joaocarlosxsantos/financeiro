const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testNotificationReplacement() {
  console.log('üß™ Testando o sistema de substitui√ß√£o de notifica√ß√µes...\n');

  try {
    // 1. Encontrar um usu√°rio ativo
    const user = await prisma.user.findFirst({
      include: {
        wallets: true
      }
    });

    if (!user || !user.wallets.length) {
      console.log('‚ùå Nenhum usu√°rio com carteiras encontrado');
      return;
    }

    console.log(`üë§ Testando com usu√°rio: ${user.email}`);
    console.log(`üí∞ Carteiras dispon√≠veis: ${user.wallets.length}`);

    // 2. Usar a primeira carteira
    const wallet = user.wallets[0];

    console.log(`üè¶ Testando com carteira: ${wallet.name}`);

    // 3. Verificar notifica√ß√µes existentes para LOW_BALANCE
    const existingNotifications = await prisma.notification.findMany({
      where: {
        userId: user.id,
        type: 'LOW_BALANCE',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // √∫ltimas 24h
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüìã Notifica√ß√µes LOW_BALANCE nas √∫ltimas 24h: ${existingNotifications.length}`);
    
    if (existingNotifications.length > 0) {
      existingNotifications.forEach((notif, index) => {
        console.log(`  ${index + 1}. ID: ${notif.id} | Ativa: ${notif.isActive} | Lida: ${notif.isRead} | Criada: ${notif.createdAt.toLocaleString()}`);
      });
    }

    // 4. Simular cria√ß√£o de uma despesa
    console.log('\nüí∏ Criando despesa para testar notifica√ß√µes...');
    
    const expenseAmount = 1000; // Valor fixo para teste
    
    const category = await prisma.category.findFirst({
      where: { userId: user.id, type: 'EXPENSE' }
    });

    if (!category) {
      console.log('‚ùå Nenhuma categoria de despesa encontrada');
      return;
    }

    const newExpense = await prisma.expense.create({
      data: {
        description: `Teste de notifica√ß√£o - ${new Date().toISOString()}`,
        amount: expenseAmount,
        date: new Date(),
        type: 'VARIABLE',
        userId: user.id,
        categoryId: category.id,
        walletId: wallet.id
      }
    });

    console.log(`‚úÖ Despesa criada: R$ ${expenseAmount} (ID: ${newExpense.id})`);

    // 5. Processar alertas (simular o que acontece na API)
    const { processTransactionAlerts } = require('./src/lib/notifications/processor');
    
    console.log('\nüîÑ Processando alertas de transa√ß√£o...');
    await processTransactionAlerts(user.id);
    
    // 6. Verificar novas notifica√ß√µes
    const newNotifications = await prisma.notification.findMany({
      where: {
        userId: user.id,
        type: 'LOW_BALANCE',
        createdAt: {
          gte: new Date(Date.now() - 2 * 60 * 1000) // √∫ltimos 2 minutos
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüì¨ Novas notifica√ß√µes LOW_BALANCE: ${newNotifications.length}`);
    
    if (newNotifications.length > 0) {
      newNotifications.forEach((notif, index) => {
        console.log(`  ${index + 1}. ID: ${notif.id} | Ativa: ${notif.isActive} | Lida: ${notif.isRead}`);
        console.log(`      Criada: ${notif.createdAt.toLocaleString()}`);
        console.log(`      Dados: ${JSON.stringify(notif.data, null, 2)}`);
      });
    }

    // 7. Verificar se notifica√ß√µes antigas foram desativadas
    const allNotifications = await prisma.notification.findMany({
      where: {
        userId: user.id,
        type: 'LOW_BALANCE',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüìä Resumo de todas as notifica√ß√µes LOW_BALANCE (24h):`);
    console.log(`   Total: ${allNotifications.length}`);
    console.log(`   Ativas: ${allNotifications.filter(n => n.isActive).length}`);
    console.log(`   Inativas: ${allNotifications.filter(n => !n.isActive).length}`);
    console.log(`   Lidas: ${allNotifications.filter(n => n.isRead).length}`);
    console.log(`   N√£o lidas: ${allNotifications.filter(n => !n.isRead).length}`);

    console.log('\n‚úÖ Teste conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o teste
testNotificationReplacement();