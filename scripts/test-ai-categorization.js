/**
 * Script de demonstra√ß√£o das melhorias de IA na importa√ß√£o de extrato
 * Execute com: node scripts/test-ai-categorization.js
 */

const { analyzeTransactionWithAI, batchAnalyzeTransactions } = require('../src/lib/ai-categorization');

// Dados de teste simulando transa√ß√µes reais
const testTransactions = [
  {
    description: "COMPRA CARTAO DEBITO 99* 99*",
    amount: -15.50
  },
  {
    description: "PAG*SPOTIFY BR SAO PAULO",
    amount: -16.90
  },
  {
    description: "PIX TRANSFERENCIA JOAO SILVA",
    amount: -200.00
  },
  {
    description: "COMPRA CARTAO CREDITO MERCADO LIVRE",
    amount: -89.99
  },
  {
    description: "DEP TRANSFERENCIA SALARIO",
    amount: 3500.00
  },
  {
    description: "COMPRA DEBITO CARREFOUR HIPER",
    amount: -156.78
  },
  {
    description: "UBER *TRIP 4X8Y9",
    amount: -23.45
  },
  {
    description: "IFOOD *PEDIDO ABC123",
    amount: -42.30
  },
  {
    description: "FARMACIA DROGASIL CENTRO",
    amount: -34.50
  },
  {
    description: "NETFLIX.COM",
    amount: -45.90
  }
];

// Categorias existentes simuladas
const existingCategories = [
  { name: "Alimenta√ß√£o", type: "EXPENSE" },
  { name: "Transporte", type: "EXPENSE" },
  { name: "Sa√∫de", type: "EXPENSE" },
  { name: "Supermercado", type: "EXPENSE" },
  { name: "Sal√°rio", type: "INCOME" },
  { name: "Tecnologia", type: "EXPENSE" }
];

async function demonstrateAI() {
  console.log("üß† DEMONSTRA√á√ÉO: Sistema de IA para Importa√ß√£o de Extrato\n");
  console.log("=" .repeat(80));
  
  // Testa an√°lise individual
  console.log("\nüìã AN√ÅLISE INDIVIDUAL DE TRANSA√á√ïES:");
  console.log("-".repeat(50));
  
  for (let i = 0; i < 3; i++) {
    const transaction = testTransactions[i];
    console.log(`\n${i + 1}. Transa√ß√£o Original:`);
    console.log(`   Descri√ß√£o: "${transaction.description}"`);
    console.log(`   Valor: R$ ${transaction.amount.toFixed(2)}`);
    
    try {
      const analysis = await analyzeTransactionWithAI(
        transaction.description,
        transaction.amount,
        existingCategories
      );
      
      console.log(`\n   üîç An√°lise da IA:`);
      console.log(`   ‚ú® Descri√ß√£o Melhorada: "${analysis.enhancedDescription}"`);
      console.log(`   üìÇ Categoria Sugerida: "${analysis.suggestedCategory}"`);
      console.log(`   üéØ Confian√ßa: ${(analysis.confidence * 100).toFixed(1)}%`);
      console.log(`   üè∑Ô∏è  Tags: [${analysis.suggestedTags.join(', ')}]`);
      console.log(`   üí° Tipo: ${analysis.categoryType}`);
      
      if (analysis.merchant) {
        console.log(`   üè™ Estabelecimento: ${analysis.merchant}`);
      }
      
      if (analysis.shouldCreateCategory) {
        console.log(`   ‚ûï Sugest√£o: Criar nova categoria "${analysis.suggestedCategory}"`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erro na an√°lise: ${error.message}`);
    }
  }
  
  // Testa an√°lise em lote
  console.log("\n\nüì¶ AN√ÅLISE EM LOTE:");
  console.log("-".repeat(50));
  
  try {
    const batchResults = await batchAnalyzeTransactions(
      testTransactions,
      existingCategories
    );
    
    console.log(`\n‚úÖ Processadas ${batchResults.length} transa√ß√µes com sucesso!\n`);
    
    // Estat√≠sticas
    const stats = {
      highConfidence: batchResults.filter(r => r.confidence >= 0.8).length,
      mediumConfidence: batchResults.filter(r => r.confidence >= 0.6 && r.confidence < 0.8).length,
      lowConfidence: batchResults.filter(r => r.confidence < 0.6).length,
      shouldCreateCategory: batchResults.filter(r => r.shouldCreateCategory).length,
      uniqueCategories: [...new Set(batchResults.map(r => r.suggestedCategory))].length,
      totalTags: batchResults.reduce((acc, r) => acc + r.suggestedTags.length, 0)
    };
    
    console.log("üìä ESTAT√çSTICAS:");
    console.log(`   üéØ Alta confian√ßa (‚â•80%): ${stats.highConfidence} transa√ß√µes`);
    console.log(`   üéØ M√©dia confian√ßa (60-79%): ${stats.mediumConfidence} transa√ß√µes`);
    console.log(`   üéØ Baixa confian√ßa (<60%): ${stats.lowConfidence} transa√ß√µes`);
    console.log(`   ‚ûï Novas categorias sugeridas: ${stats.shouldCreateCategory}`);
    console.log(`   üìÇ Categorias √∫nicas identificadas: ${stats.uniqueCategories}`);
    console.log(`   üè∑Ô∏è  Total de tags sugeridas: ${stats.totalTags}`);
    
    // Mostra resumo das melhorias
    console.log("\nüéâ RESUMO DAS MELHORIAS:");
    console.log("-".repeat(30));
    
    batchResults.forEach((result, index) => {
      const original = testTransactions[index];
      if (result.enhancedDescription !== original.description) {
        console.log(`\n${index + 1}. "${original.description}"`);
        console.log(`   ‚Üí "${result.enhancedDescription}" (${result.suggestedCategory})`);
      }
    });
    
  } catch (error) {
    console.log(`‚ùå Erro na an√°lise em lote: ${error.message}`);
  }
  
  console.log("\n" + "=".repeat(80));
  console.log("üéØ Demonstra√ß√£o conclu√≠da! O sistema est√° pronto para uso.");
}

// Fun√ß√µes auxiliares para cores no terminal
function colorize(text, color) {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    reset: '\x1b[0m'
  };
  return `${colors[color] || ''}${text}${colors.reset}`;
}

// Executa a demonstra√ß√£o
if (require.main === module) {
  demonstrateAI().catch(console.error);
}

module.exports = { demonstrateAI };