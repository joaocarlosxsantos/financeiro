// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  expenses      Expense[]
  incomes       Income[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  color       String    @default("#3B82F6")
  icon        String?
  type        CategoryType
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  incomes     Income[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, name, type])
}

model Expense {
  id          String        @id @default(cuid())
  description String
  amount      Decimal       @db.Decimal(10, 2)
  date        DateTime
  type        ExpenseType
  isFixed     Boolean       @default(false)
  startDate   DateTime?     // Para despesas fixas
  endDate     DateTime?     // Para despesas fixas
  dayOfMonth  Int?          // Para despesas fixas (dia do mês)
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Income {
  id          String      @id @default(cuid())
  description String
  amount      Decimal     @db.Decimal(10, 2)
  date        DateTime
  type        IncomeType
  isFixed     Boolean     @default(false)
  startDate   DateTime?   // Para rendas fixas
  endDate     DateTime?   // Para rendas fixas
  dayOfMonth  Int?        // Para rendas fixas (dia do mês)
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum CategoryType {
  EXPENSE
  INCOME
  BOTH
}

enum ExpenseType {
  FIXED
  VARIABLE
}

enum IncomeType {
  FIXED
  VARIABLE
}
