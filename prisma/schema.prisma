// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  apiKey             String?              @unique
  phone              String?
  emailVerified      DateTime?
  image              String?
  password           String?
  theme              String?              @default("system")
  tags               Tag[]
  categories         Category[]
  goals              Goal[]
  expenses           Expense[]
  incomes            Income[]
  wallets            Wallet[]
  creditCards        CreditCard[]
  creditExpenses     CreditExpense[]
  creditBills        CreditBill[]
  billPayments       BillPayment[]
  groups             Group[]
  members            Member[]
  bills              Bill[]
  billMemberShares   BillMemberShare[]
  notifications      Notification[]
  alertConfigurations AlertConfiguration[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Category {
  id             String          @id @default(cuid())
  name           String
  color          String          @default("#3B82F6")
  icon           String?
  type           CategoryType
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses       Expense[]
  incomes        Income[]
  creditExpenses CreditExpense[]
  goals          Goal[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([userId, name, type])
}

model Expense {
  id          String      @id @default(cuid())
  description String
  amount      Decimal     @db.Decimal(10, 2)
  date        DateTime
  type        ExpenseType
  paymentType PaymentType @default(DEBIT) // Agora só aceita DEBIT, PIX_TRANSFER, CASH, OTHER
  isFixed     Boolean     @default(false)
  startDate   DateTime? // Para despesas fixas
  endDate     DateTime? // Para despesas fixas
  dayOfMonth  Int? // Para despesas fixas (dia do mês)
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletId    String
  wallet      Wallet      @relation(fields: [walletId], references: [id])
  tags        String[] // Tags secundárias
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Income {
  id          String      @id @default(cuid())
  description String
  amount      Decimal     @db.Decimal(10, 2)
  date        DateTime
  type        IncomeType
  paymentType PaymentType @default(DEBIT) // Agora só aceita DEBIT, PIX_TRANSFER, CASH, OTHER
  isFixed     Boolean     @default(false)
  startDate   DateTime? // Para rendas fixas
  endDate     DateTime? // Para rendas fixas
  dayOfMonth  Int? // Para rendas fixas (dia do mês)
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletId    String
  wallet      Wallet      @relation(fields: [walletId], references: [id])
  tags        String[] // Tags secundárias
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Wallet {
  id           String        @id @default(cuid())
  name         String
  type         String        // Ex: "carteira", "banco", "cartao"
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses     Expense[]
  incomes      Income[]
  creditCards  CreditCard[]  @relation("CreditCardBank")
  billPayments BillPayment[] @relation("BillPayments")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userId, name])
}

model CreditCard {
  id            String         @id @default(cuid())
  name          String         // Nome do cartão
  limit         Decimal        @db.Decimal(10, 2) // Limite do cartão
  closingDay    Int            // Dia do fechamento da fatura (1-31)
  dueDay        Int            // Dia do vencimento da fatura (1-31)
  bankId        String?        // Banco vinculado (pode ser nulo)
  bank          Wallet?        @relation("CreditCardBank", fields: [bankId], references: [id])
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditExpenses CreditExpense[]
  creditBills   CreditBill[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([userId, name])
}

enum CategoryType {
  EXPENSE
  INCOME
  BOTH
}

enum ExpenseType {
  FIXED
  VARIABLE
}

enum IncomeType {
  FIXED
  VARIABLE
}

enum PaymentType {
  DEBIT        // Débito (carteira)
  PIX_TRANSFER // PIX/Transferência (carteira)
  CASH         // Dinheiro (carteira)
  OTHER        // Outros (carteira)
  // CREDIT foi removido - agora gastos de crédito usam CreditExpense
}

// --- Controle de Contas models ---

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
  bills       Bill[]

  @@unique([userId, name])
}

model Member {
  id        Int               @id @default(autoincrement())
  name      String
  phone     String?
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   Int
  group     Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  shares    BillMemberShare[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Bill {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  amount      Float
  dueDate     DateTime
  paid        Boolean           @default(false)
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId     Int
  group       Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  shares      BillMemberShare[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model BillMemberShare {
  id        Int      @id @default(autoincrement())
  billId    Int
  memberId  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  percent   Float?
  bill      Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([billId, memberId])
}

// Goals / Metas
model Goal {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  type        GoalType
  kind        GoalKind    @default(ATTAINMENT)
  operator    GoalOperator
  amount      Decimal     @db.Decimal(12, 2)
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  // legacy single references kept for compatibility
  tagName     String? // filters by tag name
  // new multi-value filters
  categoryIds String[]    @default([])
  tagFilters  String[]    @default([]) // tags to act as filters (must match)
  tagAggregates String[]  @default([]) // tags to aggregate (included in sum)
  tagNames    String[]    @default([]) // legacy: additional tag names
  walletId    String?
  appliesTo   GoalAppliesTo @default(BOTH)
  startDate   DateTime?
  endDate     DateTime?
  recurrence  GoalRecurrence?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
}

enum GoalType {
  RECURRING
  TIMED
}

enum GoalOperator {
  AT_LEAST
  AT_MOST
}

enum GoalAppliesTo {
  EXPENSES
  INCOMES
  BOTH
}

enum GoalRecurrence {
  MONTHLY
}

enum GoalKind {
  ATTAINMENT // aim to reach or accumulate an amount (positive)
  LIMIT // limit to not exceed (e.g., spend <= X), exceeding is negative
}

// Notifications and Alerts System
model Notification {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  title       String
  message     String
  priority    NotificationPriority @default(MEDIUM)
  isRead      Boolean          @default(false)
  isActive    Boolean          @default(true)
  data        Json?            // Additional data related to the notification
  scheduledFor DateTime?       // For scheduled notifications
  triggeredAt DateTime?        // When the alert condition was first detected
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId, isRead])
  @@index([userId, type])
  @@index([scheduledFor])
}

model AlertConfiguration {
  id               String              @id @default(cuid())
  userId           String
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  type             AlertConfigType
  isEnabled        Boolean             @default(true)
  thresholdAmount  Decimal?            @db.Decimal(12, 2)
  thresholdPercent Float?
  categoryIds      String[]            @default([])
  walletIds        String[]            @default([])
  settings         Json?               // Additional configuration data
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@unique([userId, type])
  @@index([userId, isEnabled])
}

enum NotificationType {
  BUDGET_EXCEEDED        // Orçamento excedido
  UNUSUAL_SPENDING       // Gasto incomum detectado
  LOW_BALANCE           // Saldo baixo
  GOAL_AT_RISK          // Meta em risco
  DUPLICATE_TRANSACTION // Possível transação duplicada
  RECURRING_DUE         // Lembrete de gasto fixo
  MONTHLY_SUMMARY       // Resumo mensal
  ACHIEVEMENT          // Conquista/meta atingida
  SYSTEM              // Notificação do sistema
  CUSTOM              // Personalizada
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AlertConfigType {
  BUDGET_EXCEEDED
  UNUSUAL_SPENDING
  LOW_BALANCE
  GOAL_AT_RISK
  DUPLICATE_TRANSACTION
  RECURRING_DUE
  MONTHLY_SUMMARY
}

// --- Modelos de Crédito ---

model CreditExpense {
  id           String           @id @default(cuid())
  description  String
  amount       Decimal          @db.Decimal(10, 2) // Valor total da compra
  purchaseDate DateTime         // Data da compra
  installments Int              @default(1) // Número de parcelas
  type         CreditExpenseType @default(EXPENSE) // Tipo: gasto ou estorno
  categoryId   String?
  category     Category?        @relation(fields: [categoryId], references: [id])
  creditCardId String
  creditCard   CreditCard       @relation(fields: [creditCardId], references: [id])
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags         String[]         @default([])
  
  // Relacionamento com itens da fatura (parcelas)
  billItems    CreditBillItem[]
  
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([userId, purchaseDate])
  @@index([creditCardId])
}

model CreditBillItem {
  id                String        @id @default(cuid())
  creditExpenseId   String
  creditExpense     CreditExpense @relation(fields: [creditExpenseId], references: [id], onDelete: Cascade)
  installmentNumber Int           // Número da parcela (1, 2, 3...)
  amount            Decimal       @db.Decimal(10, 2) // Valor desta parcela
  dueDate           DateTime      // Data de vencimento desta parcela
  billId            String?
  bill              CreditBill?   @relation(fields: [billId], references: [id])
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([billId])
  @@index([dueDate])
}

model CreditBill {
  id           String         @id @default(cuid())
  creditCardId String
  creditCard   CreditCard     @relation(fields: [creditCardId], references: [id])
  closingDate  DateTime       // Data de fechamento da fatura
  dueDate      DateTime       // Data de vencimento da fatura
  totalAmount  Decimal        @db.Decimal(10, 2) // Valor total da fatura
  paidAmount   Decimal        @db.Decimal(10, 2) @default(0) // Valor já pago
  status       BillStatus     @default(PENDING)
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relacionamentos
  items        CreditBillItem[] // Itens (parcelas) desta fatura
  payments     BillPayment[]    // Pagamentos desta fatura
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([creditCardId, closingDate]) // Uma fatura por cartão por mês
  @@index([userId, dueDate])
  @@index([status])
}

model BillPayment {
  id          String     @id @default(cuid())
  billId      String
  bill        CreditBill @relation(fields: [billId], references: [id], onDelete: Cascade)
  amount      Decimal    @db.Decimal(10, 2) // Valor pago
  paymentDate DateTime   // Data do pagamento
  walletId    String     // Carteira de onde saiu o dinheiro
  wallet      Wallet     @relation("BillPayments", fields: [walletId], references: [id])
  description String?    // Descrição opcional do pagamento
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId, paymentDate])
  @@index([billId])
}

// Novos enums
enum CreditExpenseType {
  EXPENSE   // Gasto normal
  REFUND    // Estorno/Reembolso
}

enum BillStatus {
  PENDING   // Pendente
  PAID      // Paga totalmente
  PARTIAL   // Parcialmente paga
  OVERDUE   // Vencida
}
